Starting new log file Fri Jul 26 20:29:29 2024

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running yosys for verilog parsing and synthesis
yosys  -s alu.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `alu.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/vboxuser/vsdflow/source/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \alu

3.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/vboxuser/vsdflow/source/alu.v:16$1 in module alu.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
1/11: $10\out[7:0]
2/11: $9\out[7:0]
3/11: $8\out[7:0]
4/11: $7\out[7:0]
5/11: $6\out[7:0]
6/11: $5\out[7:0]
7/11: $4\out[7:0]
8/11: $3\out[7:0]
9/11: $2\out[7:0]
10/11: $1\out[7:0]
11/11: $0\out[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\alu.\out' from process `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1': $auto$proc_dlatch.cc:408:proc_dlatch$192

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
Removing empty process `alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
Cleaned up 10 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$25' (?) in module `\alu' with constant driver `$procmux$25_Y = $procmux$23_Y'.
Replacing $mux cell `$procmux$28' (0) in module `\alu' with constant driver `$procmux$28_Y = $procmux$25_Y'.
Replacing $mux cell `$procmux$31' (0) in module `\alu' with constant driver `$procmux$31_Y = $procmux$28_Y'.
Replacing $mux cell `$procmux$37' (?) in module `\alu' with constant driver `$procmux$37_Y = $procmux$35_Y'.
Replacing $mux cell `$procmux$40' (0) in module `\alu' with constant driver `$procmux$40_Y = $procmux$37_Y'.
Replacing $mux cell `$procmux$43' (0) in module `\alu' with constant driver `$procmux$43_Y = $procmux$40_Y'.
Replacing $mux cell `$procmux$50' (?) in module `\alu' with constant driver `$procmux$50_Y = $procmux$48_Y'.
Replacing $mux cell `$procmux$53' (0) in module `\alu' with constant driver `$procmux$53_Y = $procmux$50_Y'.
Replacing $mux cell `$procmux$56' (0) in module `\alu' with constant driver `$procmux$56_Y = $procmux$53_Y'.
Replacing $mux cell `$procmux$64' (?) in module `\alu' with constant driver `$procmux$64_Y = $procmux$62_Y'.
Replacing $mux cell `$procmux$67' (0) in module `\alu' with constant driver `$procmux$67_Y = $procmux$64_Y'.
Replacing $mux cell `$procmux$70' (0) in module `\alu' with constant driver `$procmux$70_Y = $procmux$67_Y'.
Replacing $mux cell `$procmux$83' (?) in module `\alu' with constant driver `$procmux$83_Y = $procmux$81_Y'.
Replacing $mux cell `$procmux$86' (0) in module `\alu' with constant driver `$procmux$86_Y = $procmux$83_Y'.
Replacing $mux cell `$procmux$89' (0) in module `\alu' with constant driver `$procmux$89_Y = $procmux$86_Y'.
Replacing $mux cell `$procmux$105' (?) in module `\alu' with constant driver `$procmux$105_Y = $procmux$103_Y'.
Replacing $mux cell `$procmux$108' (0) in module `\alu' with constant driver `$procmux$108_Y = $procmux$105_Y'.
Replacing $mux cell `$procmux$111' (0) in module `\alu' with constant driver `$procmux$111_Y = $procmux$108_Y'.
Replacing $mux cell `$procmux$128' (?) in module `\alu' with constant driver `$procmux$128_Y = $procmux$126_Y'.
Replacing $mux cell `$procmux$131' (0) in module `\alu' with constant driver `$procmux$131_Y = $procmux$128_Y'.
Replacing $mux cell `$procmux$134' (0) in module `\alu' with constant driver `$procmux$134_Y = $procmux$131_Y'.
Replacing $eq cell `$procmux$152_CMP0' in module `alu' with $logic_not.
Replacing $mux cell `$procmux$154' (0) in module `\alu' with constant driver `$procmux$154_Y = $procmux$136_Y'.
Replacing $mux cell `$procmux$157' (0) in module `\alu' with constant driver `$procmux$157_Y = $procmux$154_Y'.
Replacing $mux cell `$procmux$160' (0) in module `\alu' with constant driver `$procmux$160_Y = $3\out[7:0]'.
Replacing $mux cell `$procmux$163' (0) in module `\alu' with constant driver `$procmux$163_Y = $procmux$160_Y'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$172' (const_or) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$173 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$176' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$177 = $auto$rtlil.cc:1629:And$175'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$178' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$179 = $auto$rtlil.cc:1604:ReduceOr$177'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$182' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$183 = $auto$rtlil.cc:1629:And$181'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$184' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$185 = $auto$rtlil.cc:1604:ReduceOr$183'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$188' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$189 = $auto$rtlil.cc:1629:And$187'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$eq' cell `$procmux$26_CMP0'.
removing unused `$eq' cell `$procmux$38_CMP0'.
removing unused `$eq' cell `$procmux$51_CMP0'.
removing unused `$eq' cell `$procmux$65_CMP0'.
removing unused `$eq' cell `$procmux$84_CMP0'.
removing unused `$eq' cell `$procmux$106_CMP0'.
removing unused `$eq' cell `$procmux$129_CMP0'.

3.5. Executing CHECK pass (checking for obvious problems).
checking module alu..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$auto$proc_dlatch.cc:238:make_hold$170' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$168'.
Redirecting output \Y: $auto$rtlil.cc:1600:Not$171 = $auto$rtlil.cc:1600:Not$169
Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$170' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$16' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:41$12'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:46$16_Y = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$16' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$17' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:42$13'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:46$17_Y = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$17' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$19' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:41$12'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:47$19_Y = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$19' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$20' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:42$13'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:47$20_Y = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$20' from module `\alu'.
Removed a total of 5 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
New ctrl vector for $pmux cell $procmux$136: { $procmux$151_CMP $procmux$150_CMP $procmux$149_CMP $procmux$148_CMP $procmux$147_CMP $procmux$146_CMP $procmux$145_CMP $procmux$144_CMP $procmux$143_CMP $procmux$142_CMP $procmux$141_CMP $procmux$140_CMP $procmux$139_CMP $procmux$138_CMP $procmux$137_CMP }
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$logic_not' cell `$procmux$152_CMP0'.

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
Removed top 24 bits (of 32) from port Y of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
Removed top 31 bits (of 32) from port B of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
Removed top 24 bits (of 32) from port Y of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
Removed top 31 bits (of 32) from port B of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
Removed top 24 bits (of 32) from port Y of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
Removed top 31 bits (of 32) from port B of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
Removed top 24 bits (of 32) from port Y of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
Removed top 1 bits (of 8) from mux cell alu.$procmux$48 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$145_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$146_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$147_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$148_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$149_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$150_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$151_CMP0 ($eq).
Removed top 1 bits (of 8) from wire alu.$8\out[7:0].
Removed top 24 bits (of 32) from wire alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:27$3 ($add).
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
creating $macc model for $mul$/home/vboxuser/vsdflow/source/alu.v:29$5 ($mul).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:28$4 ($sub).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:36$9.
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:35$8.
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:28$4.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:32$7.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:31$6.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:27$3.
creating $macc cell for $mul$/home/vboxuser/vsdflow/source/alu.v:29$5: $auto$alumacc.cc:354:replace_macc$195
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:27$3: $auto$alumacc.cc:470:replace_alu$196
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:31$6: $auto$alumacc.cc:470:replace_alu$199
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:32$7: $auto$alumacc.cc:470:replace_alu$202
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:28$4: $auto$alumacc.cc:470:replace_alu$205
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:35$8: $auto$alumacc.cc:470:replace_alu$208
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:36$9: $auto$alumacc.cc:470:replace_alu$211
created 6 $alu and 1 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Consolidated identical input bits for $mux cell $procmux$62:
Old ports: A={ \in_b [6:0] 1'0 }, B={ \in_a [6:0] 1'0 }, Y=$7\out[7:0]
New ports: A=\in_b [6:0], B=\in_a [6:0], Y=$7\out[7:0] [7:1]
New connections: $7\out[7:0] [0] = 1'0
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:20$2 ($not) with simplemap.
Mapping alu.$and$/home/vboxuser/vsdflow/source/alu.v:38$10 ($and) with simplemap.
Mapping alu.$or$/home/vboxuser/vsdflow/source/alu.v:39$11 ($or) with simplemap.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:41$12 ($not) with simplemap.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:42$13 ($not) with simplemap.
Mapping alu.$xor$/home/vboxuser/vsdflow/source/alu.v:44$14 ($xor) with simplemap.
Mapping alu.$xnor$/home/vboxuser/vsdflow/source/alu.v:45$15 ($xnor) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8'.

3.18.3. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$auto$alumacc.cc:354:replace_macc$195 ($macc) with maccmap.
add \in_a * \in_b (8x8 bits, unsigned)
Mapping alu.$or$/home/vboxuser/vsdflow/source/alu.v:46$18 ($or) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8'.

3.18.5. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$and$/home/vboxuser/vsdflow/source/alu.v:47$21 ($and) with simplemap.
Mapping alu.$procmux$23 ($mux) with simplemap.
Mapping alu.$procmux$35 ($mux) with simplemap.
Mapping alu.$procmux$48 ($mux) with simplemap.
Mapping alu.$procmux$62 ($mux) with simplemap.
Mapping alu.$procmux$81 ($mux) with simplemap.
Mapping alu.$procmux$103 ($mux) with simplemap.
Mapping alu.$procmux$126 ($mux) with simplemap.
Mapping alu.$procmux$137_CMP0 ($eq) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 8
Parameter \S_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=8\S_WIDTH=15'.

3.18.7. Continuing TECHMAP pass.
Mapping alu.$procmux$136 using $paramod\_90_pmux\WIDTH=8\S_WIDTH=15.
Mapping alu.$procmux$138_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$139_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$140_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$141_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$142_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$143_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$144_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$145_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$146_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$147_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$148_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$149_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$150_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$151_CMP0 ($eq) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8'.

3.18.9. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8.
Mapping alu.$procmux$166 ($mux) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:238:make_hold$168 ($not) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$174 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$180 ($and) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$186 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$auto$proc_dlatch.cc:408:proc_dlatch$190 ($not) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:408:proc_dlatch$192 ($dlatch) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$321 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$323 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$325 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$327 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318 ($and) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.11. Executing PROC pass (convert processes to netlists).

3.18.11.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.11.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.11.3. Executing PROC_INIT pass (extract init attributes).

3.18.11.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.11.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
1/16: $0\p[7:0] [6]
2/16: $0\g[7:0] [6]
3/16: $0\p[7:0] [4]
4/16: $0\g[7:0] [4]
5/16: $0\p[7:0] [2]
6/16: $0\g[7:0] [2]
7/16: $0\p[7:0] [5]
8/16: $0\g[7:0] [5]
9/16: $0\p[7:0] [7]
10/16: $0\g[7:0] [7]
11/16: $0\p[7:0] [3]
12/16: $0\g[7:0] [3]
13/16: $0\p[7:0] [1]
14/16: $0\g[7:0] [1]
15/16: $0\g[7:0] [0]
16/16: $0\p[7:0] [0]

3.18.11.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.

3.18.11.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.11.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
Cleaned up 0 empty switches.

3.18.12. Executing OPT pass (performing simple optimizations).

3.18.12.1. Executing OPT_EXPR pass (perform const folding).

3.18.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=8'.
Removed a total of 0 cells.

3.18.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=8..
removing unused `$and' cell `$and$<techmap.v>:222$789'.
removing unused `$and' cell `$and$<techmap.v>:222$801'.
removing unused `$and' cell `$and$<techmap.v>:222$807'.
removing unused `$and' cell `$and$<techmap.v>:230$810'.
removing unused `$and' cell `$and$<techmap.v>:230$813'.
removing unused `$and' cell `$and$<techmap.v>:230$816'.
removing unused `$and' cell `$and$<techmap.v>:230$819'.
removing unused non-port wire \j.
removing unused non-port wire \i.
removed 2 unused temporary wires.

3.18.12.5. Finished fast OPT passes.

3.18.13. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.A_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$329 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$331 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$333 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$335 ($and) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_fa'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_fa\WIDTH=8'.

3.18.15. Continuing TECHMAP pass.
Mapping alu.$auto$maccmap.cc:114:fulladd$339 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$342 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$345 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$348 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$351 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$354 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:240:synth$355 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.A_conv ($pos) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$472 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$473 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$471 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$470 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$469 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$468 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$467 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$466 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$465 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$464 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$463 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$462 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$461 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$460 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$459 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$458 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$457 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$456 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$455 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$454 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$453 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$452 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$451 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$ternary$<techmap.v>:445$450 ($mux) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:445$449 ($reduce_or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:262$687 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:262$687 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.A_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.B_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$839' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$838' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$837' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$836' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$827' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [7] = \in_b [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$826' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [6] = \in_b [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$825' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [5] = \in_b [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$824' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [4] = \in_b [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$820' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [0] = \in_b [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$821' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [1] = \in_b [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1278' (1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1270' (101) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1245' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:262$687_Y [0] = \in_b [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1319' (1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1311' (101) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1286' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:262$687_Y [0] = \in_a [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1279' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1271' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1262' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1733' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:212$785_Y = \in_b [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1749' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$213 [0] = \in_b [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1320' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1312' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1303' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1761' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:212$785_Y = \in_a [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1777' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$210 [0] = \in_a [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1280' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1272' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1263' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [1] = \in_b [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1321' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1313' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1304' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [1] = \in_a [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1281' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1273' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1264' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [2] = \in_b [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1322' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1314' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1305' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [2] = \in_a [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1282' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1274' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [4] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1265' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [3] = \in_b [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1323' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1315' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [4] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1306' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [3] = \in_a [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1283' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1275' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [5] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1266' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [4] = \in_b [4]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1324' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1316' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [5] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1307' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [4] = \in_a [4]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1284' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1276' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [6] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1267' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [5] = \in_b [5]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1325' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1317' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [6] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1308' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [5] = \in_a [5]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1285' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1277' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [7] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1268' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [6] = \in_b [6]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1326' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1318' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [7] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1309' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [6] = \in_a [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$750' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1352' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [0] = \in_a [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1335' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$743' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [1] = \in_b [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$759' (1?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [0] = \in_b [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1395' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1378' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [0] = \in_b [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1353' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [1] = \in_a [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1328' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [1] = \in_a [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1344' (1?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [0] = \in_a [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1789' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1805' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [0] = \in_a [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$822' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [2] = \in_b [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$744' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [2] = \in_b [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$760' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1377' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [1] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$787_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1354' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [2] = \in_a [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1329' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [2] = \in_a [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1345' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1806' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [1] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$787_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$823' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [3] = \in_b [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$745' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [3] = \in_b [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$761' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1370' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [2] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$811_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1355' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [3] = \in_a [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1330' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [3] = \in_a [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1346' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1814' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [2] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$811_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$746' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [4] = \in_b [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$762' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1393' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1376' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1373' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [3] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$799_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1356' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [4] = \in_a [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1331' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [4] = \in_a [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1347' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1791' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1807' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1810' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [3] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$799_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$747' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [5] = \in_b [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$763' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1369' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [4] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$814_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1357' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [5] = \in_a [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1332' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [5] = \in_a [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1348' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1815' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [4] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$814_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$748' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [6] = \in_b [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$764' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1391' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1375' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$794_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1392' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [5] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$808_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1358' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [6] = \in_a [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1333' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [6] = \in_a [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1349' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1792' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1808' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$794_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1813' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [5] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$808_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$749' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [7] = \in_b [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$765' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1368' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [6] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$817_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1359' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [7] = \in_a [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1334' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [7] = \in_a [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1350' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1816' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$817_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$476' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$474 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$492' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$489 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$506' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$504 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$507' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$504 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$523' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$519 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$536' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$534 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$538' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$534 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$552' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$549 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$553' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$549 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$566' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$567' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$568' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$584' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$579 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$596' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$594 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$599' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$594 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$612' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$609 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$614' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$609 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$626' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$627' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$629' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$643' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$639 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$644' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$639 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$656' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$658' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$659' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$672' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$673' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$674' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [3] = \opcode [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$898' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [0] = \in_a [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$881' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1187' (const_and) in module `\alu' with constant driver `$techmap$procmux$136.$and$<techmap.v>:434$454_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1083' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1081 [1] = $techmap$procmux$136.$and$<techmap.v>:434$453_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$860' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$852' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1548' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1524' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$844' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$734' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1468' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1444' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$726' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$326 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$718' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$324 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1428' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1404' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1508' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1484' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1588' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1564' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1628' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1604' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1644' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [0] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1652' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1660' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1668' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$939' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$899' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [1] = \in_a [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1677' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1693' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$198 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1532' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1540' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1516' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1572' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1580' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1556' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$861' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$853' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1452' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1460' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1436' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1549' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1525' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1492' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1500' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1476' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$845' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$735' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1469' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1445' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1412' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1420' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1396' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$727' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$326 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1405' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1509' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1485' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1589' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1565' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1629' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1605' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1612' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1620' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1596' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1645' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1653' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1661' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1636' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1817' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1833' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1669' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$940' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1705' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:212$785_Y = $techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:262$370_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$900' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [2] = \in_a [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1533' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1541' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1517' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1573' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1581' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1557' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$862' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$854' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1453' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1461' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1437' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1550' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1526' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1493' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1501' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1477' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$846' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$736' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1470' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1446' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1413' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1397' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1486' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1590' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1566' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1630' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1606' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1613' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1621' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1597' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1646' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1654' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1662' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1637' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1818' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$787_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1834' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1670' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$941' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$901' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [3] = \in_a [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1534' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1542' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1518' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1574' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1582' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1558' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$863' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$855' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1454' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1462' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1438' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1551' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1527' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1494' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1478' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$847' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1471' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [3] = $auto$rtlil.cc:1629:And$328 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1447' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [3] = $auto$rtlil.cc:1629:And$328 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1567' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1631' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1607' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1614' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1622' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1598' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1647' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1655' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1663' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1638' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1830' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$811_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1842' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1671' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$942' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$902' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [4] = \in_a [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1535' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1543' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1519' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1575' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1559' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$864' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$856' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1455' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1463' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1439' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1552' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1528' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$848' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1448' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1568' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1608' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1615' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1623' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1599' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1648' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1656' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1664' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1822' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$799_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1639' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1819' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1835' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1838' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1672' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$943' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$903' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [5] = \in_a [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1536' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1544' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1520' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1576' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1560' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$865' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$857' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1456' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1440' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1553' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1529' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1609' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1616' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1600' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1657' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1640' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1831' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$814_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1843' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1673' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [5] = $techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$944' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$904' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [6] = \in_a [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1537' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1545' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1521' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$866' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [6] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1530' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1610' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1617' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1601' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1658' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1829' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$808_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1820' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1836' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$794_Y = $techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [5]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1841' (?0) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [5] = $techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$945' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$905' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [7] = \in_a [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1202' (const_and) in module `\alu' with constant driver `$techmap$procmux$136.$and$<techmap.v>:434$453_Y [7] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$975' (0?) in module `\alu' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$973 [1] = $techmap$procmux$136.$and$<techmap.v>:434$454_Y [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1538' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1522' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1618' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1602' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1659' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [7] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$946' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$698' (?1) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$177 = $not$/home/vboxuser/vsdflow/source/alu.v:20$2_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$766' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1390' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$796_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1374' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$797_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1388' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$802_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1372' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$803_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1371' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [7] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$758' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$889' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371_Y [8] = $auto$alumacc.cc:484:replace_alu$198 [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$930' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:263$371_Y [8] = $auto$alumacc.cc:484:replace_alu$207 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1269' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [7] = \in_b [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1261' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688_Y [8] = $auto$alumacc.cc:484:replace_alu$213 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1310' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [7] = \in_a [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1302' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688_Y [8] = $auto$alumacc.cc:484:replace_alu$210 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1795' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$802_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1351' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1793' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$796_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1809' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$797_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1811' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$803_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1812' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1343' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1824' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$805_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1840' (?0) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [7] = $techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1676' (0?) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [8] = $techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$906' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1360'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$906' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1362' is identical to cell `$auto$simplemap.cc:37:simplemap_not$908'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1362' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1361' is identical to cell `$auto$simplemap.cc:37:simplemap_not$907'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1361' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$832' is identical to cell `$auto$simplemap.cc:37:simplemap_not$951'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$832' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$831' is identical to cell `$auto$simplemap.cc:37:simplemap_not$950'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$831' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$830' is identical to cell `$auto$simplemap.cc:37:simplemap_not$949'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$830' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$829' is identical to cell `$auto$simplemap.cc:37:simplemap_not$948'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$829' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$828' is identical to cell `$auto$simplemap.cc:37:simplemap_not$947'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$828' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$742' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1253'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$742' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$740' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$893'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$328 [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [3]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$740' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$730' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$892'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$326 [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [2]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$730' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$720' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$891'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$324 [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [1]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$720' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$710' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$890'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$322 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$710' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1364' is identical to cell `$auto$simplemap.cc:37:simplemap_not$910'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1364' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$664' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$679'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$662 [1] = $auto$simplemap.cc:127:simplemap_reduce$677 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$664' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$649' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$679'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$647 [1] = $auto$simplemap.cc:127:simplemap_reduce$677 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$649' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$642' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$639 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$642' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$641' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$639 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$641' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$613' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$609 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$613' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$611' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$609 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$611' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$598' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$594 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$598' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$597' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$594 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$597' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$1327' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1294'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1327' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$583' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$583' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$582' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$582' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$581' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$581' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$573' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$633'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$572 [0] = $auto$simplemap.cc:127:simplemap_reduce$632 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$573' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$551' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$549 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$551' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$554' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$549 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$554' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$537' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$534 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$537' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$539' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$534 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$539' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$522' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$522' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$521' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$521' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$524' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$524' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$513' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$633'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$512 [0] = $auto$simplemap.cc:127:simplemap_reduce$632 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$513' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$508' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$504 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$508' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1363' is identical to cell `$auto$simplemap.cc:37:simplemap_not$909'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1363' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$509' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$504 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$509' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$493' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$493' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$491' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$491' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$494' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$494' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$478' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$478' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$477' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$477' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$479' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$479' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$438' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$438' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$437' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$437' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$436' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$436' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$439' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$439' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$418' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$426'.
Redirecting output \Y: $5\out[7:0] [0] = $4\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$418' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$400' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $8\out[7:0] [4] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$400' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$399' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $8\out[7:0] [3] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$399' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$398' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $8\out[7:0] [2] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$398' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$397' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $8\out[7:0] [1] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$397' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$396' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $8\out[7:0] [0] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$396' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$394' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $9\out[7:0] [6] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$394' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$393' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $9\out[7:0] [5] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$393' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$392' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $9\out[7:0] [4] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$392' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$391' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $9\out[7:0] [3] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$391' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$390' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $9\out[7:0] [2] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$390' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$389' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$403'.
Redirecting output \Y: $9\out[7:0] [1] = $7\out[7:0] [1]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$389' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$386' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$388'.
Redirecting output \Y: $10\out[7:0] [6] = $9\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$386' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$385' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $10\out[7:0] [5] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$385' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$384' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $10\out[7:0] [4] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$384' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$383' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $10\out[7:0] [3] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$383' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$382' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $10\out[7:0] [2] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$382' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$381' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $10\out[7:0] [1] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$381' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$380' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $10\out[7:0] [0] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$380' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$912' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1366'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$912' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$913' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1367'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$913' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$834' is identical to cell `$auto$simplemap.cc:37:simplemap_not$953'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$834' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$835' is identical to cell `$auto$simplemap.cc:37:simplemap_not$954'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$835' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$314' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$879'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [6]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$314' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$313' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$878'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [5]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$313' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$312' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$877'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [4]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$312' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$311' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$876'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$311' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$310' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$875'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$310' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$309' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$874'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$309' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$308' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$873'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$308' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$297' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$879'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [6]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$297' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$296' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$878'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [5]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$296' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$295' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$877'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [4]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$295' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$294' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$876'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$294' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$293' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$875'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$293' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$292' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$874'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$292' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$291' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$873'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$291' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$289' is identical to cell `$auto$simplemap.cc:37:simplemap_not$953'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$289' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$287' is identical to cell `$auto$simplemap.cc:37:simplemap_not$951'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$287' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$286' is identical to cell `$auto$simplemap.cc:37:simplemap_not$950'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$286' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$285' is identical to cell `$auto$simplemap.cc:37:simplemap_not$949'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$285' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$284' is identical to cell `$auto$simplemap.cc:37:simplemap_not$948'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$284' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$283' is identical to cell `$auto$simplemap.cc:37:simplemap_not$947'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$283' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$281' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1366'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$281' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$279' is identical to cell `$auto$simplemap.cc:37:simplemap_not$910'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$279' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$278' is identical to cell `$auto$simplemap.cc:37:simplemap_not$909'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$278' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$277' is identical to cell `$auto$simplemap.cc:37:simplemap_not$908'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$277' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$276' is identical to cell `$auto$simplemap.cc:37:simplemap_not$907'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$276' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$275' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1360'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$275' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$265' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$896'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [6]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$265' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$264' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$895'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [5]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$264' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$263' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$894'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [4]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$263' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$262' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$893'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [3]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$262' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$261' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$892'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [2]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$261' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$260' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$891'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [1]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$260' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$259' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$890'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$259' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$266' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$897'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [7]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$266' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$911' is identical to cell `$auto$simplemap.cc:37:simplemap_not$280'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$911' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1365' is identical to cell `$auto$simplemap.cc:37:simplemap_not$280'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1365' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$833' is identical to cell `$auto$simplemap.cc:37:simplemap_not$288'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$833' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$952' is identical to cell `$auto$simplemap.cc:37:simplemap_not$288'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$952' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$282' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1367'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$282' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$290' is identical to cell `$auto$simplemap.cc:37:simplemap_not$954'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$290' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$387' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$403'.
Redirecting output \Y: $10\out[7:0] [7] = $7\out[7:0] [1]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$387' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$395' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $9\out[7:0] [7] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$395' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$402' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$388'.
Redirecting output \Y: $8\out[7:0] [6] = $9\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$402' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$409' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $7\out[7:0] [7] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$409' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$315' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$880'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [7]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$315' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$298' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$880'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [7]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$298' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$619' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$617 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$619' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$618' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$617 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$618' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$604' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$602 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$604' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$603' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$602 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$603' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$589' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$587 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$589' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$588' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$587 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$588' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$559' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$557 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$559' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$558' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$557 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$558' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$544' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$542 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$544' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$543' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$542 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$543' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$529' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$527 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$529' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$528' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$527 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$528' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$499' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$497 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$499' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$498' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$497 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$498' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$484' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$482 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$484' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$483' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$482 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$483' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$444' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$442 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$444' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$443' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$442 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$443' from module `\alu'.
Removed a total of 135 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$938'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1383'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1384'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1387'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1403'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1419'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1427'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1443'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1467'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1483'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1499'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1507'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1523'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1539'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1547'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1563'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1579'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1587'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1603'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1619'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1627'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1643'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1649'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1650'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1651'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1681'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1683'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1687'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1688'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1697'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1699'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1700'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1709'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1711'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1712'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1715'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1716'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1725'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1727'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1728'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1737'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1739'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1740'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1743'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1744'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1753'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1755'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1756'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1765'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1767'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1768'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1771'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1772'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1781'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1783'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1784'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1796'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1799'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1800'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1821'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1823'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1825'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1826'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1827'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1828'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1837'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1839'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 699 gates and 724 wires to a netlist network with 23 inputs and 9 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o
ABC: + map
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      121
ABC RESULTS:              AOI3 cells:       40
ABC RESULTS:              AOI4 cells:       12
ABC RESULTS:               MUX cells:       38
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       26
ABC RESULTS:               NOT cells:       56
ABC RESULTS:              OAI3 cells:       32
ABC RESULTS:              OAI4 cells:       23
ABC RESULTS:                OR cells:       56
ABC RESULTS:              XNOR cells:       26
ABC RESULTS:               XOR cells:       77
ABC RESULTS:        internal signals:      692
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:        9
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1898' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2139' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2280' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2273' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1947' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1895' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2049' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2055' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1950' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1963' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1981' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1986' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1988' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2346' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2351' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2204' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2122' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2129' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2189' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2194' in module `alu'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1895'.
Redirecting output \Y: $abc$1845$n123 = $abc$1845$n82
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2056' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1996'.
Redirecting output \Y: $abc$1845$n243 = $abc$1845$n183
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2056' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2130' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2065'.
Redirecting output \Y: $abc$1845$n317_1 = $abc$1845$n252
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2130' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2204'.
Redirecting output \Y: $abc$1845$n468 = $abc$1845$n391
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1898'.
Redirecting output \Y: $abc$1845$n540 = $abc$1845$n85
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' from module `\alu'.
Removed a total of 5 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$_NOT_' cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1892'.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \alu

3.22.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.23. Printing statistics.

=== alu ===

Number of wires:                520
Number of wire bits:            565
Number of public wires:           9
Number of public wire bits:      47
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                526
$_AND_                        121
$_AOI3_                        40
$_AOI4_                        12
$_DLATCH_P_                     8
$_MUX_                         33
$_NAND_                        17
$_NOR_                         26
$_NOT_                         55
$_OAI3_                        32
$_OAI4_                        23
$_OR_                          56
$_XNOR_                        26
$_XOR_                         77

3.24. Executing CHECK pass (checking for obvious problems).
checking module alu..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\alu':

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).


LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project alu
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vboxuser/vsdflow/synthesis/alu.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vboxuser/vsdflow/layout/alu.cel
No alu.cel1 file found for project. . . no partial blockages to apply to layout.
No alu.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  alu
Running getfillcell to determine cell to use for fill.
getfillcell.tcl alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl alu FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  alu
Reading info file alu.info. . .
Reading DEF file alu.def. . .
Recalculating pin positions
Writing DEF file alu_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/vboxuser/vsdflow/synthesis/alu.blif alu.def /home/vboxuser/vsdflow/synthesis/alu_anno.blif

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running qrouter 1.4.59.T
qrouter -noc  -s alu.cfg
*** Running stage1 routing with defaults
Nets remaining: 600
Nets remaining: 500
Nets remaining: 400
Nets remaining: 300
Nets remaining: 200
Nets remaining: 100
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 50
Progress: Stage 1 total routes completed: 1536
Failed net routes: 29
*** Running stage2 routing with options mask 10, effort 10
Nets remaining: 20
Nets remaining: 10
Nets remaining: 10
Nets remaining: 9
Nets remaining: 9
Nets remaining: 9
Nets remaining: 9
Nets remaining: 8
Nets remaining: 8
Nets remaining: 9
Nets remaining: 8
Nets remaining: 8
Nets remaining: 9
Nets remaining: 8
Nets remaining: 7
Nets remaining: 8
Nets remaining: 7
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 4
Nets remaining: 4
Nets remaining: 4
Nets remaining: 4
Nets remaining: 4
Nets remaining: 5
Nets remaining: 4
Nets remaining: 5
Nets remaining: 5
Nets remaining: 4
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 1
Nets remaining: 5
Nets remaining: 4
Nets remaining: 5
Nets remaining: 5
Nets remaining: 4
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 4
Nets remaining: 6
Nets remaining: 6
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 3
Nets remaining: 6
Nets remaining: 6
Nets remaining: 6
Progress: Stage 2 total routes completed: 1846
Failed net routes: 5
*** Running stage2 routing with options mask 20, effort 10
Nets remaining: 5
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 2
Nets remaining: 2
Nets remaining: 4
Nets remaining: 3
Nets remaining: 2
Nets remaining: 1
Progress: Stage 2 total routes completed: 1925
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 600
Nets remaining: 500
Nets remaining: 400
Nets remaining: 200
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 40
Nets remaining: 20
Progress: Stage 3 total routes completed: 3391
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 600
Nets remaining: 500
Nets remaining: 400
Nets remaining: 200
Nets remaining: 90
Nets remaining: 80
Nets remaining: 70
Nets remaining: 60
Nets remaining: 40
Nets remaining: 20
Progress: Stage 3 total routes completed: 4851
No failed routes!
*** Writing DEF file alu_route.def
Final: No failed routes!
*** Writing RC file alu_route.rc
Running annotate.tcl antenna.out /home/vboxuser/vsdflow/synthesis/alu.rtlnopwr.v
/home/vboxuser/vsdflow/synthesis/alu.spc /home/vboxuser/vsdflow/synthesis/alu.rtlnopwr.anno.v
/home/vboxuser/vsdflow/synthesis/alu.anno.spc  /usr/local/share/qflow/tech/osu035/osu035_stdcells.sp /home/vboxuser/vsdflow/synthesis/alu_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Converting qrouter output to vesta delay format
Running rc2dly -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.dly
Reading Liberty timing file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Number of Rs: 3901
TBD: need to clean-up node deletion
Converting qrouter output to SPEF delay format
Running rc2dly -D : -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.spef
Reading Liberty timing file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Number of Rs: 3901
TBD: need to clean-up node deletion
Converting qrouter output to SDF delay format
Running rc2dly -r alu.rc -l /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib -d alu.sdf

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  migrate_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_alu.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file alu.def.
This action cannot be undone.
Processed 3 vias total.
Processed 743 subcell instances total.
Processed 33 pins total.
Processed 688 nets total.
DEF read, Line 9661 (Warning): Number of nets read (128) does not match the number declared (130).
DEF read: Processed 9662 lines.
DEF Read: encountered 1 warning total.
Generating LEF output alu.lef for cell alu:
Diagnostic:  Write LEF header for cell alu
Diagnostic:  Writing LEF output for cell alu
Diagnostic:  Scale value is 0.050000
Extracting BUFX4 into BUFX4.ext:
Completed 100%
Extracting MUX2X1 into MUX2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX4 into INVX4.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 100%
Extracting XNOR2X1 into XNOR2X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 100%
Extracting alu into alu.ext:
Completed 5%
Completed 11%
Completed 16%
Completed 22%
Completed 27%
Completed 33%
Completed 38%
Completed 43%
Completed 49%
Completed 54%
Completed 60%
Completed 65%
Completed 71%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/vboxuser/vsdflow/layout/run_drc_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vboxuser/vsdflow/layout/run_drc_alu.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Scaled magic input cell alu geometry by factor of 2
alu: 10000 rects
Processing timestamp mismatches: FILL, NOR2X1, AOI21X1, INVX2, BUFX2, NOR3X1, OAI21X1, OAI22X1, AND2X2, INVX1, OR2X2, NAND2X1, NAND3X1, XNOR2X1, AOI22X1, BUFX4, INVX4, XOR2X1, MUX2X1.
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/vboxuser/vsdflow/layout/run_drc_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vboxuser/vsdflow/layout/run_drc_alu.tcl" from command line.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Scaled magic input cell alu geometry by factor of 2
alu: 10000 rects
Processing timestamp mismatches: FILL, NOR2X1, AOI21X1, INVX2, BUFX2, NOR3X1, OAI21X1, OAI22X1, AND2X2, INVX1, OR2X2, NAND2X1, NAND3X1, XNOR2X1, AOI22X1, BUFX4, INVX4, XOR2X1, MUX2X1.
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/vboxuser/vsdflow/layout/run_drc_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vboxuser/vsdflow/layout/run_drc_alu.tcl" from command line.
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.
Moving label "C" from space to metal1 in cell OAI21X1.
Reading "OAI22X1".
Moving label "gnd" from space to metal1 in cell OAI22X1.
Moving label "vdd" from space to metal1 in cell OAI22X1.
Moving label "D" from space to metal1 in cell OAI22X1.
Moving label "C" from space to metal1 in cell OAI22X1.
Moving label "A" from space to metal1 in cell OAI22X1.
Moving label "B" from space to metal1 in cell OAI22X1.
Moving label "Y" from space to metal1 in cell OAI22X1.
Reading "OR2X1".
Moving label "Y" from space to metal1 in cell OR2X1.
Moving label "B" from space to metal1 in cell OR2X1.
Moving label "vdd" from space to metal1 in cell OR2X1.
Moving label "gnd" from space to metal1 in cell OR2X1.
Moving label "A" from space to metal1 in cell OR2X1.
Reading "OR2X2".
Moving label "Y" from space to metal1 in cell OR2X2.
Moving label "B" from space to metal1 in cell OR2X2.
Moving label "vdd" from space to metal1 in cell OR2X2.
Moving label "gnd" from space to metal1 in cell OR2X2.
Moving label "A" from space to metal1 in cell OR2X2.
Reading "TBUFX1".
Moving label "vdd" from space to metal1 in cell TBUFX1.
Moving label "gnd" from space to metal1 in cell TBUFX1.
Moving label "EN" from space to metal1 in cell TBUFX1.
Moving label "A" from space to metal1 in cell TBUFX1.
Moving label "Y" from space to metal1 in cell TBUFX1.
Reading "TBUFX2".
Moving label "vdd" from space to metal1 in cell TBUFX2.
Moving label "gnd" from space to metal1 in cell TBUFX2.
Moving label "A" from space to metal1 in cell TBUFX2.
Moving label "EN" from space to metal1 in cell TBUFX2.
Moving label "Y" from space to metal1 in cell TBUFX2.
Reading "XOR2X1".
Moving label "Y" from space to metal1 in cell XOR2X1.
Moving label "vdd" from space to metal1 in cell XOR2X1.
Moving label "B" from space to metal1 in cell XOR2X1.
Moving label "A" from space to metal1 in cell XOR2X1.
Moving label "gnd" from space to metal1 in cell XOR2X1.
Reading "MUX2X1".
Moving label "S" from space to metal1 in cell MUX2X1.
Moving label "vdd" from space to metal1 in cell MUX2X1.
Moving label "gnd" from space to metal1 in cell MUX2X1.
Moving label "Y" from space to metal1 in cell MUX2X1.
Moving label "A" from space to metal1 in cell MUX2X1.
Moving label "B" from space to metal1 in cell MUX2X1.
Reading "XNOR2X1".
Moving label "A" from space to metal1 in cell XNOR2X1.
Moving label "B" from space to metal1 in cell XNOR2X1.
Moving label "gnd" from space to metal1 in cell XNOR2X1.
Moving label "vdd" from space to metal1 in cell XNOR2X1.
Moving label "Y" from space to metal1 in cell XNOR2X1.
Reading "LATCH".
Moving label "D" from space to metal1 in cell LATCH.
Moving label "Q" from space to metal1 in cell LATCH.
Moving label "gnd" from space to metal1 in cell LATCH.
Moving label "vdd" from space to metal1 in cell LATCH.
Moving label "CLK" from space to metal1 in cell LATCH.
Reading "DFFSR".
Moving label "gnd" from space to metal1 in cell DFFSR.
Moving label "vdd" from space to metal1 in cell DFFSR.
Moving label "D" from space to metal1 in cell DFFSR.
Moving label "S" from space to metal1 in cell DFFSR.
Moving label "R" from space to metal1 in cell DFFSR.
Moving label "Q" from space to metal1 in cell DFFSR.
Moving label "CLK" from space to metal1 in cell DFFSR.
Reading "CLKBUF1".
Moving label "A" from space to metal1 in cell CLKBUF1.
Moving label "vdd" from space to metal1 in cell CLKBUF1.
Moving label "gnd" from space to metal1 in cell CLKBUF1.
Moving label "Y" from space to metal1 in cell CLKBUF1.
Reading "CLKBUF2".
Moving label "vdd" from space to metal1 in cell CLKBUF2.
Moving label "gnd" from space to metal1 in cell CLKBUF2.
Moving label "A" from space to metal1 in cell CLKBUF2.
Moving label "Y" from space to metal1 in cell CLKBUF2.
Reading "CLKBUF3".
Moving label "gnd" from space to metal1 in cell CLKBUF3.
Moving label "vdd" from space to metal1 in cell CLKBUF3.
Moving label "A" from space to metal1 in cell CLKBUF3.
Moving label "Y" from space to metal1 in cell CLKBUF3.
Reading "iit_stdcells".
Scaled magic input cell alu geometry by factor of 2
alu: 10000 rects
Processing timestamp mismatches: FILL, NOR2X1, AOI21X1, INVX2, BUFX2, NOR3X1, OAI21X1, OAI22X1, AND2X2, INVX1, OR2X2, NAND2X1, NAND3X1, XNOR2X1, AOI22X1, BUFX4, INVX4, XOR2X1, MUX2X1.
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project adder
Running yosys for verilog parsing and synthesis
yosys  -s adder.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `adder.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/vboxuser/vsdflow/source/adder.v' to AST representation.
Generating RTLIL representation for module `\adder'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \adder

3.1.2. Analyzing design hierarchy..
Top module:  \adder
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.5. Executing CHECK pass (checking for obvious problems).
checking module adder..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \adder.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder:
creating $macc model for $add$/home/vboxuser/vsdflow/source/adder.v:5$1 ($add).
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/adder.v:5$1.
creating $alu cell for $add$/home/vboxuser/vsdflow/source/adder.v:5$1: $auto$alumacc.cc:470:replace_alu$2
created 1 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \adder.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \adder.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 1
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1'.

3.18.3. Continuing TECHMAP pass.
Mapping adder.$auto$alumacc.cc:470:replace_alu$2 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.$xor$<techmap.v>:262$52 ($xor) with simplemap.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.$xor$<techmap.v>:263$53 ($xor) with simplemap.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.$and$<techmap.v>:260$51 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=1'.

3.18.5. Executing PROC pass (convert processes to netlists).

3.18.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.5.3. Executing PROC_INIT pass (extract init attributes).

3.18.5.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$58'.
1/2: $0\g[0:0]
2/2: $0\p[0:0]

3.18.5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=1.\p' from process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$58'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=1.\g' from process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$58'.

3.18.5.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$58'.
Cleaned up 0 empty switches.

3.18.6. Executing OPT pass (performing simple optimizations).

3.18.6.1. Executing OPT_EXPR pass (perform const folding).

3.18.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=1'.
Removed a total of 0 cells.

3.18.6.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=1..
removing unused non-port wire \j.
removing unused non-port wire \i.
removed 2 unused temporary wires.

3.18.6.5. Finished fast OPT passes.

3.18.7. Continuing TECHMAP pass.
Mapping adder.$auto$alumacc.cc:470:replace_alu$2.lcu using $paramod\_90_lcu\WIDTH=1.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.$ternary$<techmap.v>:258$50 ($mux) with simplemap.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.$not$<techmap.v>:258$49 ($not) with simplemap.
Mapping adder.$auto$alumacc.cc:470:replace_alu$2.B_conv ($pos) with simplemap.
Mapping adder.$auto$alumacc.cc:470:replace_alu$2.A_conv ($pos) with simplemap.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.lcu.$and$<techmap.v>:212$59 ($and) with simplemap.
Mapping adder.$techmap$auto$alumacc.cc:470:replace_alu$2.lcu.$or$<techmap.v>:212$60 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$61' (??0) in module `\adder' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2.$ternary$<techmap.v>:258$50_Y = \a'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$55' (?0) in module `\adder' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2.$xor$<techmap.v>:263$53_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$2.$xor$<techmap.v>:262$52_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$63' (const_and) in module `\adder' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2.lcu.$and$<techmap.v>:212$59_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$64' (?0) in module `\adder' with constant driver `$auto$alumacc.cc:484:replace_alu$4 = $techmap$auto$alumacc.cc:470:replace_alu$2.$and$<techmap.v>:260$51_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$56' (0?) in module `\adder' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$2.$xor$<techmap.v>:263$53_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$2.$and$<techmap.v>:260$51_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$57'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$62'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\adder' to `<abc-temp-dir>/input.blif'..
Extracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o
ABC: + map
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        1
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \adder

3.22.2. Analyzing design hierarchy..
Top module:  \adder
Removed 0 unused modules.

3.23. Printing statistics.



LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project adder
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vboxuser/vsdflow/synthesis/adder.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vboxuser/vsdflow/layout/adder.cel
No adder.cel1 file found for project. . . no partial blockages to apply to layout.
No adder.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  adder

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project adder
Running magic 8.3.50
magic -dnull -noconsole  migrate_adder.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running yosys for verilog parsing and synthesis
yosys  -s alu.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `alu.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/vboxuser/vsdflow/source/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \alu

3.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/vboxuser/vsdflow/source/alu.v:16$1 in module alu.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
1/11: $10\out[7:0]
2/11: $9\out[7:0]
3/11: $8\out[7:0]
4/11: $7\out[7:0]
5/11: $6\out[7:0]
6/11: $5\out[7:0]
7/11: $4\out[7:0]
8/11: $3\out[7:0]
9/11: $2\out[7:0]
10/11: $1\out[7:0]
11/11: $0\out[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\alu.\out' from process `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1': $auto$proc_dlatch.cc:408:proc_dlatch$192

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
Removing empty process `alu.$proc$/home/vboxuser/vsdflow/source/alu.v:16$1'.
Cleaned up 10 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$25' (?) in module `\alu' with constant driver `$procmux$25_Y = $procmux$23_Y'.
Replacing $mux cell `$procmux$28' (0) in module `\alu' with constant driver `$procmux$28_Y = $procmux$25_Y'.
Replacing $mux cell `$procmux$31' (0) in module `\alu' with constant driver `$procmux$31_Y = $procmux$28_Y'.
Replacing $mux cell `$procmux$37' (?) in module `\alu' with constant driver `$procmux$37_Y = $procmux$35_Y'.
Replacing $mux cell `$procmux$40' (0) in module `\alu' with constant driver `$procmux$40_Y = $procmux$37_Y'.
Replacing $mux cell `$procmux$43' (0) in module `\alu' with constant driver `$procmux$43_Y = $procmux$40_Y'.
Replacing $mux cell `$procmux$50' (?) in module `\alu' with constant driver `$procmux$50_Y = $procmux$48_Y'.
Replacing $mux cell `$procmux$53' (0) in module `\alu' with constant driver `$procmux$53_Y = $procmux$50_Y'.
Replacing $mux cell `$procmux$56' (0) in module `\alu' with constant driver `$procmux$56_Y = $procmux$53_Y'.
Replacing $mux cell `$procmux$64' (?) in module `\alu' with constant driver `$procmux$64_Y = $procmux$62_Y'.
Replacing $mux cell `$procmux$67' (0) in module `\alu' with constant driver `$procmux$67_Y = $procmux$64_Y'.
Replacing $mux cell `$procmux$70' (0) in module `\alu' with constant driver `$procmux$70_Y = $procmux$67_Y'.
Replacing $mux cell `$procmux$83' (?) in module `\alu' with constant driver `$procmux$83_Y = $procmux$81_Y'.
Replacing $mux cell `$procmux$86' (0) in module `\alu' with constant driver `$procmux$86_Y = $procmux$83_Y'.
Replacing $mux cell `$procmux$89' (0) in module `\alu' with constant driver `$procmux$89_Y = $procmux$86_Y'.
Replacing $mux cell `$procmux$105' (?) in module `\alu' with constant driver `$procmux$105_Y = $procmux$103_Y'.
Replacing $mux cell `$procmux$108' (0) in module `\alu' with constant driver `$procmux$108_Y = $procmux$105_Y'.
Replacing $mux cell `$procmux$111' (0) in module `\alu' with constant driver `$procmux$111_Y = $procmux$108_Y'.
Replacing $mux cell `$procmux$128' (?) in module `\alu' with constant driver `$procmux$128_Y = $procmux$126_Y'.
Replacing $mux cell `$procmux$131' (0) in module `\alu' with constant driver `$procmux$131_Y = $procmux$128_Y'.
Replacing $mux cell `$procmux$134' (0) in module `\alu' with constant driver `$procmux$134_Y = $procmux$131_Y'.
Replacing $eq cell `$procmux$152_CMP0' in module `alu' with $logic_not.
Replacing $mux cell `$procmux$154' (0) in module `\alu' with constant driver `$procmux$154_Y = $procmux$136_Y'.
Replacing $mux cell `$procmux$157' (0) in module `\alu' with constant driver `$procmux$157_Y = $procmux$154_Y'.
Replacing $mux cell `$procmux$160' (0) in module `\alu' with constant driver `$procmux$160_Y = $3\out[7:0]'.
Replacing $mux cell `$procmux$163' (0) in module `\alu' with constant driver `$procmux$163_Y = $procmux$160_Y'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$172' (const_or) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$173 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$176' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$177 = $auto$rtlil.cc:1629:And$175'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$178' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$179 = $auto$rtlil.cc:1604:ReduceOr$177'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$182' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$183 = $auto$rtlil.cc:1629:And$181'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$184' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$185 = $auto$rtlil.cc:1604:ReduceOr$183'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$188' (unary_buffer) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$189 = $auto$rtlil.cc:1629:And$187'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$eq' cell `$procmux$26_CMP0'.
removing unused `$eq' cell `$procmux$38_CMP0'.
removing unused `$eq' cell `$procmux$51_CMP0'.
removing unused `$eq' cell `$procmux$65_CMP0'.
removing unused `$eq' cell `$procmux$84_CMP0'.
removing unused `$eq' cell `$procmux$106_CMP0'.
removing unused `$eq' cell `$procmux$129_CMP0'.

3.5. Executing CHECK pass (checking for obvious problems).
checking module alu..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$auto$proc_dlatch.cc:238:make_hold$170' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$168'.
Redirecting output \Y: $auto$rtlil.cc:1600:Not$171 = $auto$rtlil.cc:1600:Not$169
Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$170' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$16' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:41$12'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:46$16_Y = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$16' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$17' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:42$13'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:46$17_Y = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:46$17' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$19' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:41$12'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:47$19_Y = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$19' from module `\alu'.
Cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$20' is identical to cell `$not$/home/vboxuser/vsdflow/source/alu.v:42$13'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:47$20_Y = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y
Removing $not cell `$not$/home/vboxuser/vsdflow/source/alu.v:47$20' from module `\alu'.
Removed a total of 5 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
New ctrl vector for $pmux cell $procmux$136: { $procmux$151_CMP $procmux$150_CMP $procmux$149_CMP $procmux$148_CMP $procmux$147_CMP $procmux$146_CMP $procmux$145_CMP $procmux$144_CMP $procmux$143_CMP $procmux$142_CMP $procmux$141_CMP $procmux$140_CMP $procmux$139_CMP $procmux$138_CMP $procmux$137_CMP }
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$logic_not' cell `$procmux$152_CMP0'.

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
Removed top 24 bits (of 32) from port Y of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
Removed top 31 bits (of 32) from port B of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
Removed top 24 bits (of 32) from port Y of cell alu.$add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
Removed top 31 bits (of 32) from port B of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
Removed top 24 bits (of 32) from port Y of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
Removed top 31 bits (of 32) from port B of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
Removed top 24 bits (of 32) from port Y of cell alu.$sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
Removed top 1 bits (of 8) from mux cell alu.$procmux$48 ($mux).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$145_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$146_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$147_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell alu.$procmux$148_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$149_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell alu.$procmux$150_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell alu.$procmux$151_CMP0 ($eq).
Removed top 1 bits (of 8) from wire alu.$8\out[7:0].
Removed top 24 bits (of 32) from wire alu.$add$/home/vboxuser/vsdflow/source/alu.v:31$6_Y.

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:27$3 ($add).
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:31$6 ($add).
creating $macc model for $add$/home/vboxuser/vsdflow/source/alu.v:32$7 ($add).
creating $macc model for $mul$/home/vboxuser/vsdflow/source/alu.v:29$5 ($mul).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:28$4 ($sub).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:35$8 ($sub).
creating $macc model for $sub$/home/vboxuser/vsdflow/source/alu.v:36$9 ($sub).
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:36$9.
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:35$8.
creating $alu model for $macc $sub$/home/vboxuser/vsdflow/source/alu.v:28$4.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:32$7.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:31$6.
creating $alu model for $macc $add$/home/vboxuser/vsdflow/source/alu.v:27$3.
creating $macc cell for $mul$/home/vboxuser/vsdflow/source/alu.v:29$5: $auto$alumacc.cc:354:replace_macc$195
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:27$3: $auto$alumacc.cc:470:replace_alu$196
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:31$6: $auto$alumacc.cc:470:replace_alu$199
creating $alu cell for $add$/home/vboxuser/vsdflow/source/alu.v:32$7: $auto$alumacc.cc:470:replace_alu$202
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:28$4: $auto$alumacc.cc:470:replace_alu$205
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:35$8: $auto$alumacc.cc:470:replace_alu$208
creating $alu cell for $sub$/home/vboxuser/vsdflow/source/alu.v:36$9: $auto$alumacc.cc:470:replace_alu$211
created 6 $alu and 1 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Consolidated identical input bits for $mux cell $procmux$62:
Old ports: A={ \in_b [6:0] 1'0 }, B={ \in_a [6:0] 1'0 }, Y=$7\out[7:0]
New ports: A=\in_b [6:0], B=\in_a [6:0], Y=$7\out[7:0] [7:1]
New connections: $7\out[7:0] [0] = 1'0
Optimizing cells in module \alu.
Performed a total of 1 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Root of a mux tree: $procmux$166 (pure)
Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \alu.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:20$2 ($not) with simplemap.
Mapping alu.$and$/home/vboxuser/vsdflow/source/alu.v:38$10 ($and) with simplemap.
Mapping alu.$or$/home/vboxuser/vsdflow/source/alu.v:39$11 ($or) with simplemap.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:41$12 ($not) with simplemap.
Mapping alu.$not$/home/vboxuser/vsdflow/source/alu.v:42$13 ($not) with simplemap.
Mapping alu.$xor$/home/vboxuser/vsdflow/source/alu.v:44$14 ($xor) with simplemap.
Mapping alu.$xnor$/home/vboxuser/vsdflow/source/alu.v:45$15 ($xnor) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8'.

3.18.3. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$auto$alumacc.cc:354:replace_macc$195 ($macc) with maccmap.
add \in_a * \in_b (8x8 bits, unsigned)
Mapping alu.$or$/home/vboxuser/vsdflow/source/alu.v:46$18 ($or) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8'.

3.18.5. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$and$/home/vboxuser/vsdflow/source/alu.v:47$21 ($and) with simplemap.
Mapping alu.$procmux$23 ($mux) with simplemap.
Mapping alu.$procmux$35 ($mux) with simplemap.
Mapping alu.$procmux$48 ($mux) with simplemap.
Mapping alu.$procmux$62 ($mux) with simplemap.
Mapping alu.$procmux$81 ($mux) with simplemap.
Mapping alu.$procmux$103 ($mux) with simplemap.
Mapping alu.$procmux$126 ($mux) with simplemap.
Mapping alu.$procmux$137_CMP0 ($eq) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 8
Parameter \S_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=8\S_WIDTH=15'.

3.18.7. Continuing TECHMAP pass.
Mapping alu.$procmux$136 using $paramod\_90_pmux\WIDTH=8\S_WIDTH=15.
Mapping alu.$procmux$138_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$139_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$140_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$141_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$142_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$143_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$144_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$145_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$146_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$147_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$148_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$149_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$150_CMP0 ($eq) with simplemap.
Mapping alu.$procmux$151_CMP0 ($eq) with simplemap.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8'.

3.18.9. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8.
Mapping alu.$procmux$166 ($mux) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:238:make_hold$168 ($not) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$174 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$180 ($and) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:251:make_hold$186 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$auto$proc_dlatch.cc:408:proc_dlatch$190 ($not) with simplemap.
Mapping alu.$auto$proc_dlatch.cc:408:proc_dlatch$192 ($dlatch) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$321 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$323 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$325 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$327 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318 ($and) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.11. Executing PROC pass (convert processes to netlists).

3.18.11.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.11.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.11.3. Executing PROC_INIT pass (extract init attributes).

3.18.11.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.11.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
1/16: $0\p[7:0] [6]
2/16: $0\g[7:0] [6]
3/16: $0\p[7:0] [4]
4/16: $0\g[7:0] [4]
5/16: $0\p[7:0] [2]
6/16: $0\g[7:0] [2]
7/16: $0\p[7:0] [5]
8/16: $0\g[7:0] [5]
9/16: $0\p[7:0] [7]
10/16: $0\g[7:0] [7]
11/16: $0\p[7:0] [3]
12/16: $0\g[7:0] [3]
13/16: $0\p[7:0] [1]
14/16: $0\g[7:0] [1]
15/16: $0\g[7:0] [0]
16/16: $0\p[7:0] [0]

3.18.11.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.

3.18.11.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.11.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$784'.
Cleaned up 0 empty switches.

3.18.12. Executing OPT pass (performing simple optimizations).

3.18.12.1. Executing OPT_EXPR pass (perform const folding).

3.18.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=8'.
Removed a total of 0 cells.

3.18.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=8..
removing unused `$and' cell `$and$<techmap.v>:222$789'.
removing unused `$and' cell `$and$<techmap.v>:222$801'.
removing unused `$and' cell `$and$<techmap.v>:222$807'.
removing unused `$and' cell `$and$<techmap.v>:230$810'.
removing unused `$and' cell `$and$<techmap.v>:230$813'.
removing unused `$and' cell `$and$<techmap.v>:230$816'.
removing unused `$and' cell `$and$<techmap.v>:230$819'.
removing unused non-port wire \j.
removing unused non-port wire \i.
removed 2 unused temporary wires.

3.18.12.5. Finished fast OPT passes.

3.18.13. Continuing TECHMAP pass.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$202.A_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$329 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$331 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$333 ($and) with simplemap.
Mapping alu.$auto$maccmap.cc:82:add$335 ($and) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_fa'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_fa\WIDTH=8'.

3.18.15. Continuing TECHMAP pass.
Mapping alu.$auto$maccmap.cc:114:fulladd$339 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$342 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$345 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$348 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$351 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:114:fulladd$354 using $paramod\_90_fa\WIDTH=8.
Mapping alu.$auto$maccmap.cc:240:synth$355 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$196.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$205.A_conv ($pos) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$472 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$473 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$471 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$470 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$469 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$468 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$467 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:441$466 ($reduce_or) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$465 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$464 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$463 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$462 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$461 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$460 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$459 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$458 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$457 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$456 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$455 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$454 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$453 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$452 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$and$<techmap.v>:434$451 ($and) with simplemap.
Mapping alu.$techmap$procmux$136.$ternary$<techmap.v>:445$450 ($mux) with simplemap.
Mapping alu.$techmap$procmux$136.$reduce_or$<techmap.v>:445$449 ($reduce_or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:262$687 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$211.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:262$687 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$208.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320 ($xor) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318 ($and) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317 ($mux) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316 ($not) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.B_conv ($pos) with simplemap.
Mapping alu.$auto$alumacc.cc:470:replace_alu$199.A_conv ($pos) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367 ($not) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368 ($mux) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370 ($xor) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371 ($xor) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.A_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.B_conv ($pos) with simplemap.
Mapping alu.$auto$maccmap.cc:240:synth$355.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:212$785 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$787 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$790 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$793 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$796 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$799 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$802 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$805 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$792 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$795 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$798 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:222$804 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$808 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$811 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$814 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$817 ($and) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:212$786 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$788 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$791 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$794 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$797 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$800 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$806 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$809 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$812 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$815 ($or) with simplemap.
Mapping alu.$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:229$818 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$839' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$838' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$837' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$836' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$330 [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$827' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [7] = \in_b [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$826' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [6] = \in_b [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$825' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [5] = \in_b [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$824' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [4] = \in_b [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$820' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [0] = \in_b [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$821' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [1] = \in_b [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1278' (1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1270' (101) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1245' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:262$687_Y [0] = \in_b [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1319' (1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1311' (101) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1286' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:262$687_Y [0] = \in_a [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1279' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1271' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1262' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1733' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.lcu.$and$<techmap.v>:212$785_Y = \in_b [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1749' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$213 [0] = \in_b [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1320' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1312' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1303' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1761' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.lcu.$and$<techmap.v>:212$785_Y = \in_a [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1777' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$210 [0] = \in_a [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1280' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1272' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1263' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [1] = \in_b [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1321' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1313' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1304' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [1] = \in_a [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1281' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1273' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1264' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [2] = \in_b [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1322' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1314' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1305' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [2] = \in_a [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1282' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1274' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [4] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1265' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [3] = \in_b [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1323' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1315' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [4] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1306' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [3] = \in_a [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1283' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1275' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [5] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1266' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [4] = \in_b [4]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1324' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1316' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [5] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1307' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [4] = \in_a [4]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1284' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1276' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [6] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1267' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [5] = \in_b [5]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1325' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1317' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [6] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1308' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [5] = \in_a [5]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1285' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$not$<techmap.v>:258$684_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1277' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$ternary$<techmap.v>:258$685_Y [7] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1268' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [6] = \in_b [6]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1326' (0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$not$<techmap.v>:258$684_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1318' (011) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$ternary$<techmap.v>:258$685_Y [7] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1309' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [6] = \in_a [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$750' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1352' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [0] = \in_a [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1335' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$743' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [1] = \in_b [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$759' (1?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [0] = \in_b [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1395' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1378' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [0] = \in_b [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1353' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [1] = \in_a [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1328' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [1] = \in_a [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1344' (1?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [0] = \in_a [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1789' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1805' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [0] = \in_a [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$822' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [2] = \in_b [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$744' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [2] = \in_b [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$760' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1377' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [1] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$787_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1354' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [2] = \in_a [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1329' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [2] = \in_a [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1345' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1806' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [1] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$787_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$823' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$ternary$<techmap.v>:258$317_Y [3] = \in_b [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$745' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [3] = \in_b [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$761' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1370' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [2] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$811_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1355' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [3] = \in_a [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1330' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [3] = \in_a [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1346' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1814' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [2] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$811_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$746' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [4] = \in_b [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$762' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1393' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1376' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1373' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [3] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$799_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1356' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [4] = \in_a [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1331' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [4] = \in_a [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1347' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1791' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1807' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1810' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [3] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$799_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$747' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [5] = \in_b [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$763' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1369' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [4] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$814_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1357' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [5] = \in_a [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1332' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [5] = \in_a [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1348' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1815' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [4] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$814_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$748' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [6] = \in_b [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$764' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1391' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1375' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$794_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1392' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [5] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$808_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1358' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [6] = \in_a [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1333' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [6] = \in_a [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1349' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1792' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1808' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$794_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1813' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [5] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$808_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$749' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [7] = \in_b [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$765' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1368' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [6] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:229$817_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1359' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$ternary$<techmap.v>:258$317_Y [7] = \in_a [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1334' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [7] = \in_a [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1350' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1816' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:229$817_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$476' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$474 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$492' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$489 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$506' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$504 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$507' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$504 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$523' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$519 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$536' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$534 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$538' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$534 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$552' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$549 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$553' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$549 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$566' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$567' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$568' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$564 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$584' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$579 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$596' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$594 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$599' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$594 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$612' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$609 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$614' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$609 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$626' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$627' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$629' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$624 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$643' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$639 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$644' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$639 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$656' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [0] = \opcode [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$658' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$659' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$654 [3] = \opcode [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$672' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [1] = \opcode [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$673' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [2] = \opcode [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$674' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$669 [3] = \opcode [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$898' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [0] = \in_a [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$881' (?0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1187' (const_and) in module `\alu' with constant driver `$techmap$procmux$136.$and$<techmap.v>:434$454_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1083' (?0) in module `\alu' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1081 [1] = $techmap$procmux$136.$and$<techmap.v>:434$453_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$860' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$852' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1548' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1524' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$844' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$734' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1468' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1444' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$726' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$326 [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$718' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$324 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1428' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1404' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1508' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1484' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1588' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1564' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1628' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1604' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1644' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [0] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1652' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1660' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1668' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [0] = $auto$rtlil.cc:1629:And$322 [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$939' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$899' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [1] = \in_a [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1677' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1693' (?0) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$198 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1532' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1540' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1516' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1572' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1580' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1556' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$861' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$853' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1452' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1460' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1436' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1549' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1525' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1492' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1500' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1476' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$845' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$735' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1469' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1445' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1412' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1420' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1396' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$727' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$326 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1405' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1509' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1485' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1589' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1565' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1629' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1605' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1612' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1620' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1596' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [0] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1645' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1653' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1661' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1636' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1817' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:212$785_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1833' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1669' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$xor$<techmap.v>:189$868_Y [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$940' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1705' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.lcu.$and$<techmap.v>:212$785_Y = $techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:262$370_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$900' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [2] = \in_a [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1533' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1541' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1517' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1573' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1581' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1557' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$862' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$854' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1453' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1461' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1437' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1550' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1526' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1493' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1501' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1477' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$846' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$736' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$328 [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1470' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1446' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1413' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1397' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$339.$or$<techmap.v>:190$872_Y [1] = $techmap$auto$maccmap.cc:114:fulladd$339.$and$<techmap.v>:189$869_Y [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1486' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1590' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1566' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1630' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1606' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1613' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1621' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1597' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [1] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1646' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1654' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1662' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1637' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1818' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$787_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1834' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1670' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$xor$<techmap.v>:189$868_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$941' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$901' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [3] = \in_a [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1534' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1542' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1518' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1574' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1582' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1558' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$863' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$855' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1454' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1462' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1438' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1551' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1527' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1494' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1478' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$345.$or$<techmap.v>:190$872_Y [2] = $techmap$auto$maccmap.cc:114:fulladd$345.$and$<techmap.v>:189$869_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$847' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1471' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [3] = $auto$rtlil.cc:1629:And$328 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1447' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [3] = $auto$rtlil.cc:1629:And$328 [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1567' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1631' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1607' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1614' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1622' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1598' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [2] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1647' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1655' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1663' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1638' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1830' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$811_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1842' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [2] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1671' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$942' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$902' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [4] = \in_a [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1535' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1543' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1519' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1575' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1559' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [3] = $techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$864' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$856' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1455' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1463' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1439' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1552' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1528' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$848' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$332 [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1448' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$342.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1568' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$351.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1608' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1615' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1623' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [3] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1599' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [3] = 1'0'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1648' (0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$not$<techmap.v>:258$367_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1656' (010) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1664' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1822' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$799_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1639' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1819' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$790_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1835' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$791_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1838' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1672' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$943' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$903' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [5] = \in_a [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1536' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1544' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1520' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1576' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1560' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$351.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$351.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$865' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$857' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$334 [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1456' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1440' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$342.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1553' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1529' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$342.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1609' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1616' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1600' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [4] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1657' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1640' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1831' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$814_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1843' (00) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [4] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1673' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [5] = $techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:262$370_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$944' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$904' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [6] = \in_a [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1537' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1545' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1521' (00) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$866' (const_and) in module `\alu' with constant driver `$auto$rtlil.cc:1629:And$336 [6] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1530' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:190$871_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$348.$xor$<techmap.v>:189$868_Y [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1610' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:190$871_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$xor$<techmap.v>:189$868_Y [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1617' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [5] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1601' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [5] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1658' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1829' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:229$808_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1820' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$793_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1836' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$794_Y = $techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [5]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1841' (?0) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [5] = $techmap$auto$maccmap.cc:240:synth$355.$and$<techmap.v>:260$369_Y [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$945' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$905' (??0) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$ternary$<techmap.v>:258$368_Y [7] = \in_a [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1202' (const_and) in module `\alu' with constant driver `$techmap$procmux$136.$and$<techmap.v>:434$453_Y [7] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$975' (0?) in module `\alu' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$973 [1] = $techmap$procmux$136.$and$<techmap.v>:434$454_Y [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1538' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$870_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1522' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$348.$or$<techmap.v>:190$872_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$348.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1618' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$870_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1602' (?0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:114:fulladd$354.$or$<techmap.v>:190$872_Y [6] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1659' (??0) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$ternary$<techmap.v>:258$368_Y [7] = $techmap$auto$maccmap.cc:114:fulladd$354.$and$<techmap.v>:189$869_Y [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$946' (??1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$ternary$<techmap.v>:258$368_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$698' (?1) in module `\alu' with constant driver `$auto$rtlil.cc:1604:ReduceOr$177 = $not$/home/vboxuser/vsdflow/source/alu.v:20$2_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$766' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$and$<techmap.v>:260$318_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1390' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$796_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1374' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$797_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1388' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$802_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1372' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$or$<techmap.v>:221$803_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1371' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$204 [7] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$758' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:263$320_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$202.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$889' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:263$371_Y [8] = $auto$alumacc.cc:484:replace_alu$198 [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$930' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$205.$xor$<techmap.v>:263$371_Y [8] = $auto$alumacc.cc:484:replace_alu$207 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1269' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$and$<techmap.v>:260$686_Y [7] = \in_b [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1261' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688_Y [8] = $auto$alumacc.cc:484:replace_alu$213 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1310' (?1) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$and$<techmap.v>:260$686_Y [7] = \in_a [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1302' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688_Y [8] = $auto$alumacc.cc:484:replace_alu$210 [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1795' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$802_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1351' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$and$<techmap.v>:260$318_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1793' (const_and) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$796_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1809' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$797_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1811' (00) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$or$<techmap.v>:221$803_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1812' (0?) in module `\alu' with constant driver `$auto$alumacc.cc:484:replace_alu$201 [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1343' (0?) in module `\alu' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:263$320_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$199.lcu.$and$<techmap.v>:221$805_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1824' (const_and) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.lcu.$and$<techmap.v>:221$805_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1840' (?0) in module `\alu' with constant driver `$auto$maccmap.cc:247:synth$358 [7] = $techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1676' (0?) in module `\alu' with constant driver `$techmap$auto$maccmap.cc:240:synth$355.$xor$<techmap.v>:263$371_Y [8] = $techmap$auto$maccmap.cc:240:synth$355.lcu.$or$<techmap.v>:221$803_Y'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$906' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1360'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$906' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1362' is identical to cell `$auto$simplemap.cc:37:simplemap_not$908'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1362' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1361' is identical to cell `$auto$simplemap.cc:37:simplemap_not$907'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1361' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$832' is identical to cell `$auto$simplemap.cc:37:simplemap_not$951'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$832' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$831' is identical to cell `$auto$simplemap.cc:37:simplemap_not$950'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$831' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$830' is identical to cell `$auto$simplemap.cc:37:simplemap_not$949'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$830' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$829' is identical to cell `$auto$simplemap.cc:37:simplemap_not$948'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$829' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$828' is identical to cell `$auto$simplemap.cc:37:simplemap_not$947'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$828' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$742' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1253'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$xor$<techmap.v>:262$319_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$211.$xor$<techmap.v>:263$688_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$742' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$740' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$893'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$328 [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [3]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$740' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$730' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$892'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$326 [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [2]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$730' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$720' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$891'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$324 [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [1]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$720' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$710' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$890'.
Redirecting output \Y: $auto$rtlil.cc:1629:And$322 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$710' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1364' is identical to cell `$auto$simplemap.cc:37:simplemap_not$910'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1364' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$664' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$679'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$662 [1] = $auto$simplemap.cc:127:simplemap_reduce$677 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$664' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$649' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$679'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$647 [1] = $auto$simplemap.cc:127:simplemap_reduce$677 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$649' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$642' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$639 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$642' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$641' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$639 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$641' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$613' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$609 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$613' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$611' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$609 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$611' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$598' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$594 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$598' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$597' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$594 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$597' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$1327' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1294'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$xor$<techmap.v>:262$319_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$208.$xor$<techmap.v>:263$688_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1327' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$583' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$583' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$582' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$582' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$581' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$579 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$581' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$573' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$633'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$572 [0] = $auto$simplemap.cc:127:simplemap_reduce$632 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$573' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$551' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$549 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$551' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$554' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$549 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$554' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$537' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$534 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$537' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$539' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$534 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$539' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$522' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$522' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$521' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$521' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$524' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$519 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$524' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$513' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$633'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$512 [0] = $auto$simplemap.cc:127:simplemap_reduce$632 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$513' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$508' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$504 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$508' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1363' is identical to cell `$auto$simplemap.cc:37:simplemap_not$909'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1363' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$509' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$504 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$509' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$493' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$493' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$491' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$491' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$494' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$489 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$494' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$478' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$478' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$477' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$477' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$479' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$474 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$479' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$438' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$628'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [2] = $auto$simplemap.cc:250:simplemap_eqne$624 [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$438' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$437' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$657'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [1] = $auto$simplemap.cc:250:simplemap_eqne$654 [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$437' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$436' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$671'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [0] = $auto$simplemap.cc:250:simplemap_eqne$669 [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$436' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$439' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$569'.
Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$434 [3] = $auto$simplemap.cc:250:simplemap_eqne$564 [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$439' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$418' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$426'.
Redirecting output \Y: $5\out[7:0] [0] = $4\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$418' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$400' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $8\out[7:0] [4] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$400' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$399' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $8\out[7:0] [3] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$399' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$398' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $8\out[7:0] [2] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$398' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$397' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $8\out[7:0] [1] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$397' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$396' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $8\out[7:0] [0] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$396' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$394' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $9\out[7:0] [6] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$394' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$393' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $9\out[7:0] [5] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$393' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$392' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $9\out[7:0] [4] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$392' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$391' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $9\out[7:0] [3] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$391' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$390' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $9\out[7:0] [2] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$390' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$389' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$403'.
Redirecting output \Y: $9\out[7:0] [1] = $7\out[7:0] [1]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$389' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$386' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$388'.
Redirecting output \Y: $10\out[7:0] [6] = $9\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$386' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$385' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $10\out[7:0] [5] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$385' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$384' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$408'.
Redirecting output \Y: $10\out[7:0] [4] = $7\out[7:0] [6]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$384' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$383' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$407'.
Redirecting output \Y: $10\out[7:0] [3] = $7\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$383' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$382' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$406'.
Redirecting output \Y: $10\out[7:0] [2] = $7\out[7:0] [4]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$382' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$381' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$405'.
Redirecting output \Y: $10\out[7:0] [1] = $7\out[7:0] [3]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$381' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$380' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$404'.
Redirecting output \Y: $10\out[7:0] [0] = $7\out[7:0] [2]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$380' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$912' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1366'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$912' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$913' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1367'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$913' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$834' is identical to cell `$auto$simplemap.cc:37:simplemap_not$953'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$834' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$835' is identical to cell `$auto$simplemap.cc:37:simplemap_not$954'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$835' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$314' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$879'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [6]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$314' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$313' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$878'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [5]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$313' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$312' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$877'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [4]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$312' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$311' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$876'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$311' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$310' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$875'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$310' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$309' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$874'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$309' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$308' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$873'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$308' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$297' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$879'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [6]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$297' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$296' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$878'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [5]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$296' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$295' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$877'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [4]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$295' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$294' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$876'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [3]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$294' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$293' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$875'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [2]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$293' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$292' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$874'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [1]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$292' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$291' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$873'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [0]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$291' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$289' is identical to cell `$auto$simplemap.cc:37:simplemap_not$953'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$289' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$287' is identical to cell `$auto$simplemap.cc:37:simplemap_not$951'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$287' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$286' is identical to cell `$auto$simplemap.cc:37:simplemap_not$950'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$286' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$285' is identical to cell `$auto$simplemap.cc:37:simplemap_not$949'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$285' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$284' is identical to cell `$auto$simplemap.cc:37:simplemap_not$948'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$284' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$283' is identical to cell `$auto$simplemap.cc:37:simplemap_not$947'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$283' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$281' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1366'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [6]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$281' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$279' is identical to cell `$auto$simplemap.cc:37:simplemap_not$910'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [4]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$279' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$278' is identical to cell `$auto$simplemap.cc:37:simplemap_not$909'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [3]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$278' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$277' is identical to cell `$auto$simplemap.cc:37:simplemap_not$908'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [2]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$277' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$276' is identical to cell `$auto$simplemap.cc:37:simplemap_not$907'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [1]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$276' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$275' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1360'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [0]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$275' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$265' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$896'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [6] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [6]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$265' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$264' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$895'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [5] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [5]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$264' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$263' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$894'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [4] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [4]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$263' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$262' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$893'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [3] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [3]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$262' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$261' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$892'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [2] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [2]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$261' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$260' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$891'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [1] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [1]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$260' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$259' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$890'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [0]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$259' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$266' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$897'.
Redirecting output \Y: $and$/home/vboxuser/vsdflow/source/alu.v:38$10_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$and$<techmap.v>:260$369_Y [7]
Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$266' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$911' is identical to cell `$auto$simplemap.cc:37:simplemap_not$280'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$196.$not$<techmap.v>:258$367_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$911' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$1365' is identical to cell `$auto$simplemap.cc:37:simplemap_not$280'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1365' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$833' is identical to cell `$auto$simplemap.cc:37:simplemap_not$288'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$202.$not$<techmap.v>:258$316_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$833' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$952' is identical to cell `$auto$simplemap.cc:37:simplemap_not$288'.
Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [5] = $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [5]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$952' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$282' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1367'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:41$12_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$199.$not$<techmap.v>:258$316_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$282' from module `\alu'.
Cell `$auto$simplemap.cc:37:simplemap_not$290' is identical to cell `$auto$simplemap.cc:37:simplemap_not$954'.
Redirecting output \Y: $not$/home/vboxuser/vsdflow/source/alu.v:42$13_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$205.$not$<techmap.v>:258$367_Y [7]
Removing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$290' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$387' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$403'.
Redirecting output \Y: $10\out[7:0] [7] = $7\out[7:0] [1]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$387' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$395' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $9\out[7:0] [7] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$395' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$402' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$388'.
Redirecting output \Y: $8\out[7:0] [6] = $9\out[7:0] [0]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$402' from module `\alu'.
Cell `$auto$simplemap.cc:277:simplemap_mux$409' is identical to cell `$auto$simplemap.cc:277:simplemap_mux$401'.
Redirecting output \Y: $7\out[7:0] [7] = $8\out[7:0] [5]
Removing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$409' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$315' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$880'.
Redirecting output \Y: $auto$simplemap.cc:65:simplemap_bitop$299 [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [7]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$315' from module `\alu'.
Cell `$auto$simplemap.cc:85:simplemap_bitop$298' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$880'.
Redirecting output \Y: $xor$/home/vboxuser/vsdflow/source/alu.v:44$14_Y [7] = $techmap$auto$alumacc.cc:470:replace_alu$196.$xor$<techmap.v>:262$370_Y [7]
Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$298' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$619' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$617 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$619' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$618' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$617 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$618' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$604' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$602 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$604' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$603' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$602 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$603' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$589' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$634'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$587 [1] = $auto$simplemap.cc:127:simplemap_reduce$632 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$589' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$588' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$587 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$588' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$559' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$557 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$559' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$558' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$557 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$558' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$544' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$542 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$544' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$543' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$542 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$543' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$529' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$574'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$527 [1] = $auto$simplemap.cc:127:simplemap_reduce$572 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$529' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$528' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$527 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$528' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$499' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$497 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$499' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$498' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$678'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$497 [0] = $auto$simplemap.cc:127:simplemap_reduce$677 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$498' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$484' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$482 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$484' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$483' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$663'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$482 [0] = $auto$simplemap.cc:127:simplemap_reduce$662 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$483' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$444' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$514'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$442 [1] = $auto$simplemap.cc:127:simplemap_reduce$512 [1]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$444' from module `\alu'.
Cell `$auto$simplemap.cc:136:simplemap_reduce$443' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$648'.
Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$442 [0] = $auto$simplemap.cc:127:simplemap_reduce$647 [0]
Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$443' from module `\alu'.
Removed a total of 135 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$938'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1383'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1384'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1387'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1403'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1419'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1427'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1443'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1459'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1467'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1483'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1499'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1507'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1523'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1539'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1547'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1563'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1579'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1587'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1603'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1619'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1627'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1643'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1649'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1650'.
removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1651'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1681'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1683'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1684'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1687'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1688'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1697'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1699'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1700'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1709'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1711'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1712'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1715'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1716'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1725'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1727'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1728'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1737'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1739'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1740'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1743'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1744'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1753'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1755'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1756'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1765'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1767'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1768'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1771'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1772'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1781'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1783'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1784'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1796'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1799'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1800'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1821'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1823'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1825'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1826'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1827'.
removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$1828'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1837'.
removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$1839'.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 699 gates and 724 wires to a netlist network with 23 inputs and 9 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o
ABC: + map
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:      121
ABC RESULTS:              AOI3 cells:       40
ABC RESULTS:              AOI4 cells:       12
ABC RESULTS:               MUX cells:       38
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       26
ABC RESULTS:               NOT cells:       56
ABC RESULTS:              OAI3 cells:       32
ABC RESULTS:              OAI4 cells:       23
ABC RESULTS:                OR cells:       56
ABC RESULTS:              XNOR cells:       26
ABC RESULTS:               XOR cells:       77
ABC RESULTS:        internal signals:      692
ABC RESULTS:           input signals:       23
ABC RESULTS:          output signals:        9
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1898' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2139' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2280' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2273' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1947' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1895' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2049' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2055' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1950' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1963' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1981' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1986' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1988' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2346' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2351' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2204' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2122' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2129' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2189' in module `alu'.
Optimizing away select inverter for $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2194' in module `alu'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1895'.
Redirecting output \Y: $abc$1845$n123 = $abc$1845$n82
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1936' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2056' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1996'.
Redirecting output \Y: $abc$1845$n243 = $abc$1845$n183
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2056' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2130' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2065'.
Redirecting output \Y: $abc$1845$n317_1 = $abc$1845$n252
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2130' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2204'.
Redirecting output \Y: $abc$1845$n468 = $abc$1845$n391
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2281' from module `\alu'.
Cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' is identical to cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1898'.
Redirecting output \Y: $abc$1845$n540 = $abc$1845$n85
Removing $_MUX_ cell `$abc$1845$auto$blifparse.cc:286:parse_blif$2353' from module `\alu'.
Removed a total of 5 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
removing unused `$_NOT_' cell `$abc$1845$auto$blifparse.cc:286:parse_blif$1892'.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \alu

3.22.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

3.23. Printing statistics.

=== alu ===

Number of wires:                520
Number of wire bits:            565
Number of public wires:           9
Number of public wire bits:      47
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                526
$_AND_                        121
$_AOI3_                        40
$_AOI4_                        12
$_DLATCH_P_                     8
$_MUX_                         33
$_NAND_                        17
$_NOR_                         26
$_NOT_                         55
$_OAI3_                        32
$_OAI4_                        23
$_OR_                          56
$_XNOR_                        26
$_XOR_                         77

3.24. Executing CHECK pass (checking for obvious problems).
checking module alu..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
final dff cell mappings:
DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\alu':

5. Executing OPT pass (performing simple optimizations).



LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project alu
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vboxuser/vsdflow/synthesis/alu.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vboxuser/vsdflow/layout/alu.cel
No alu.cel1 file found for project. . . no partial blockages to apply to layout.
No alu.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  alu
Running getfillcell to determine cell to use for fill.
getfillcell.tcl alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl alu FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG alu  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  alu
Reading info file alu.info. . .
Reading DEF file alu.def. . .
Recalculating pin positions
Writing DEF file alu_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/vboxuser/vsdflow/synthesis/alu.blif alu.def /home/vboxuser/vsdflow/synthesis/alu_anno.blif

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running qrouter 1.4.59.T
qrouter -noc  -s alu.cfg

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  migrate_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "migrate_alu.tcl" from command line.
Root cell box:
width x height  (   llx,  lly  ), (   urx,  ury  )

microns:    0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
lambda:     0.00 x 0.00    (  0.00,  0.00 ), (  0.00,  0.00 )
internal:      0 x 0       (     0,  0    ), (     0,  0    )
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
This action cannot be undone.
LEF read, Line 16 (Message): Unknown keyword "OBS" in LEF file; ignoring.
LEF read, Line 17 (Message): Unknown keyword "PIN" in LEF file; ignoring.
LEF read: Processed 3179 lines.
Reading DEF data from file alu.def.
This action cannot be undone.
Processed 3 vias total.
Processed 743 subcell instances total.
Processed 33 pins total.
Processed 688 nets total.
DEF read, Line 9661 (Warning): Number of nets read (128) does not match the number declared (130).
DEF read: Processed 9662 lines.
DEF Read: encountered 1 warning total.
Generating LEF output alu.lef for cell alu:
Diagnostic:  Write LEF header for cell alu
Diagnostic:  Writing LEF output for cell alu
Diagnostic:  Scale value is 0.050000
Extracting BUFX4 into BUFX4.ext:
Completed 100%
Extracting MUX2X1 into MUX2X1.ext:
Completed 100%
Extracting OAI22X1 into OAI22X1.ext:
Completed 100%
Extracting INVX4 into INVX4.ext:
Completed 100%
Extracting NOR3X1 into NOR3X1.ext:
Completed 100%
Extracting OR2X2 into OR2X2.ext:
Completed 100%
Extracting BUFX2 into BUFX2.ext:
Completed 100%
Extracting INVX2 into INVX2.ext:
Completed 100%
Extracting AND2X2 into AND2X2.ext:
Completed 100%
Extracting XOR2X1 into XOR2X1.ext:
Completed 100%
Extracting XNOR2X1 into XNOR2X1.ext:
Completed 100%
Extracting FILL into FILL.ext:
Completed 100%
Extracting INVX1 into INVX1.ext:
Completed 100%
Extracting NOR2X1 into NOR2X1.ext:
Completed 100%
Extracting AOI22X1 into AOI22X1.ext:
Completed 100%
Extracting NAND2X1 into NAND2X1.ext:
Completed 100%
Extracting OAI21X1 into OAI21X1.ext:
Completed 100%
Extracting AOI21X1 into AOI21X1.ext:
Completed 100%
Extracting NAND3X1 into NAND3X1.ext:
Completed 100%
Extracting alu into alu.ext:
Completed 5%
Completed 11%
Completed 16%
Completed 22%
Completed 27%
Completed 33%
Completed 38%
Completed 43%
Completed 49%
Completed 54%
Completed 60%
Completed 65%
Completed 71%

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project alu
Running magic 8.3.50
magic -dnull -noconsole  /home/vboxuser/vsdflow/layout/run_drc_alu.tcl

Magic 8.3 revision 50 - Compiled on Wed Jul 24 16:37:46 IST 2024.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.20(p): scaleFactor=20, multiplier=1
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
Contact size value ignored (using GDS generation rules).
4 Magic internal units = 1 Lambda
Loading "/home/vboxuser/vsdflow/layout/run_drc_alu.tcl" from command line.
Warning: Calma reading is not undoable!  I hope that's OK.
Library written using GDS-II Release 3.0
Library name: iit_stdcells
Reading "FILL".
Moving label "vdd" from space to metal1 in cell FILL.
Moving label "gnd" from space to metal1 in cell FILL.
Reading "AND2X1".
Moving label "Y" from space to metal1 in cell AND2X1.
Moving label "B" from space to metal1 in cell AND2X1.
Moving label "vdd" from space to metal1 in cell AND2X1.
Moving label "gnd" from space to metal1 in cell AND2X1.
Moving label "A" from space to metal1 in cell AND2X1.
Reading "AND2X2".
Moving label "vdd" from space to metal1 in cell AND2X2.
Moving label "gnd" from space to metal1 in cell AND2X2.
Moving label "A" from space to metal1 in cell AND2X2.
Moving label "B" from space to metal1 in cell AND2X2.
Moving label "Y" from space to metal1 in cell AND2X2.
Reading "AOI21X1".
Moving label "gnd" from space to metal1 in cell AOI21X1.
Moving label "vdd" from space to metal1 in cell AOI21X1.
Moving label "A" from space to metal1 in cell AOI21X1.
Moving label "B" from space to metal1 in cell AOI21X1.
Moving label "Y" from space to metal1 in cell AOI21X1.
Moving label "C" from space to metal1 in cell AOI21X1.
Reading "AOI22X1".
Moving label "gnd" from space to metal1 in cell AOI22X1.
Moving label "vdd" from space to metal1 in cell AOI22X1.
Moving label "C" from space to metal1 in cell AOI22X1.
Moving label "D" from space to metal1 in cell AOI22X1.
Moving label "Y" from space to metal1 in cell AOI22X1.
Moving label "A" from space to metal1 in cell AOI22X1.
Moving label "B" from space to metal1 in cell AOI22X1.
Reading "BUFX2".
Moving label "vdd" from space to metal1 in cell BUFX2.
Moving label "gnd" from space to metal1 in cell BUFX2.
Moving label "A" from space to metal1 in cell BUFX2.
Moving label "Y" from space to metal1 in cell BUFX2.
Reading "BUFX4".
Moving label "vdd" from space to metal1 in cell BUFX4.
Moving label "gnd" from space to metal1 in cell BUFX4.
Moving label "A" from space to metal1 in cell BUFX4.
Moving label "Y" from space to metal1 in cell BUFX4.
Reading "DFFNEGX1".
Moving label "CLK" from space to metal1 in cell DFFNEGX1.
Moving label "vdd" from space to metal1 in cell DFFNEGX1.
Moving label "D" from space to metal1 in cell DFFNEGX1.
Moving label "gnd" from space to metal1 in cell DFFNEGX1.
Moving label "Q" from space to metal1 in cell DFFNEGX1.
Reading "NOR3X1".
Moving label "vdd" from space to metal1 in cell NOR3X1.
Moving label "gnd" from space to metal1 in cell NOR3X1.
Moving label "B" from space to metal1 in cell NOR3X1.
Moving label "C" from space to metal1 in cell NOR3X1.
Moving label "A" from space to metal1 in cell NOR3X1.
Moving label "Y" from space to metal1 in cell NOR3X1.
Reading "DFFPOSX1".
Moving label "vdd" from space to metal1 in cell DFFPOSX1.
Moving label "D" from space to metal1 in cell DFFPOSX1.
Moving label "gnd" from space to metal1 in cell DFFPOSX1.
Moving label "Q" from space to metal1 in cell DFFPOSX1.
Moving label "CLK" from space to metal1 in cell DFFPOSX1.
Reading "FAX1".
Moving label "gnd" from space to metal1 in cell FAX1.
Moving label "vdd" from space to metal1 in cell FAX1.
Moving label "A" from space to metal1 in cell FAX1.
Moving label "B" from space to metal1 in cell FAX1.
Moving label "C" from space to metal1 in cell FAX1.
Moving label "YC" from space to metal1 in cell FAX1.
Moving label "YS" from space to metal1 in cell FAX1.
Reading "HAX1".
Moving label "vdd" from space to metal1 in cell HAX1.
Moving label "gnd" from space to metal1 in cell HAX1.
Moving label "YC" from space to metal1 in cell HAX1.
Moving label "A" from space to metal1 in cell HAX1.
Moving label "B" from space to metal1 in cell HAX1.
Moving label "YS" from space to metal1 in cell HAX1.
Reading "INVX1".
Moving label "A" from space to metal1 in cell INVX1.
Moving label "Y" from space to metal1 in cell INVX1.
Moving label "vdd" from space to metal1 in cell INVX1.
Moving label "gnd" from space to metal1 in cell INVX1.
Reading "INVX2".
Moving label "vdd" from space to metal1 in cell INVX2.
Moving label "gnd" from space to metal1 in cell INVX2.
Moving label "Y" from space to metal1 in cell INVX2.
Moving label "A" from space to metal1 in cell INVX2.
Reading "INVX4".
Moving label "vdd" from space to metal1 in cell INVX4.
Moving label "gnd" from space to metal1 in cell INVX4.
Moving label "Y" from space to metal1 in cell INVX4.
Moving label "A" from space to metal1 in cell INVX4.
Reading "INVX8".
Moving label "vdd" from space to metal1 in cell INVX8.
Moving label "gnd" from space to metal1 in cell INVX8.
Moving label "A" from space to metal1 in cell INVX8.
Moving label "Y" from space to metal1 in cell INVX8.
Reading "NAND2X1".
Moving label "vdd" from space to metal1 in cell NAND2X1.
Moving label "Y" from space to metal1 in cell NAND2X1.
Moving label "gnd" from space to metal1 in cell NAND2X1.
Moving label "A" from space to metal1 in cell NAND2X1.
Moving label "B" from space to metal1 in cell NAND2X1.
Reading "NAND3X1".
Moving label "B" from space to metal1 in cell NAND3X1.
Moving label "vdd" from space to metal1 in cell NAND3X1.
Moving label "gnd" from space to metal1 in cell NAND3X1.
Moving label "A" from space to metal1 in cell NAND3X1.
Moving label "C" from space to metal1 in cell NAND3X1.
Moving label "Y" from space to metal1 in cell NAND3X1.
Reading "NOR2X1".
Moving label "vdd" from space to metal1 in cell NOR2X1.
Moving label "B" from space to metal1 in cell NOR2X1.
Moving label "gnd" from space to metal1 in cell NOR2X1.
Moving label "Y" from space to metal1 in cell NOR2X1.
Moving label "A" from space to metal1 in cell NOR2X1.
Reading "OAI21X1".
Moving label "gnd" from space to metal1 in cell OAI21X1.
Moving label "vdd" from space to metal1 in cell OAI21X1.
Moving label "A" from space to metal1 in cell OAI21X1.
Moving label "B" from space to metal1 in cell OAI21X1.
Moving label "Y" from space to metal1 in cell OAI21X1.
Moving label "C" from space to metal1 in cell OAI21X1.
Reading "OAI22X1".
Moving label "gnd" from space to metal1 in cell OAI22X1.
Moving label "vdd" from space to metal1 in cell OAI22X1.
Moving label "D" from space to metal1 in cell OAI22X1.
Moving label "C" from space to metal1 in cell OAI22X1.
Moving label "A" from space to metal1 in cell OAI22X1.
Moving label "B" from space to metal1 in cell OAI22X1.
Moving label "Y" from space to metal1 in cell OAI22X1.
Reading "OR2X1".
Moving label "Y" from space to metal1 in cell OR2X1.
Moving label "B" from space to metal1 in cell OR2X1.
Moving label "vdd" from space to metal1 in cell OR2X1.
Moving label "gnd" from space to metal1 in cell OR2X1.
Moving label "A" from space to metal1 in cell OR2X1.
Reading "OR2X2".
Moving label "Y" from space to metal1 in cell OR2X2.
Moving label "B" from space to metal1 in cell OR2X2.
Moving label "vdd" from space to metal1 in cell OR2X2.
Moving label "gnd" from space to metal1 in cell OR2X2.
Moving label "A" from space to metal1 in cell OR2X2.
Reading "TBUFX1".
Moving label "vdd" from space to metal1 in cell TBUFX1.
Moving label "gnd" from space to metal1 in cell TBUFX1.
Moving label "EN" from space to metal1 in cell TBUFX1.
Moving label "A" from space to metal1 in cell TBUFX1.
Moving label "Y" from space to metal1 in cell TBUFX1.
Reading "TBUFX2".
Moving label "vdd" from space to metal1 in cell TBUFX2.
Moving label "gnd" from space to metal1 in cell TBUFX2.
Moving label "A" from space to metal1 in cell TBUFX2.
Moving label "EN" from space to metal1 in cell TBUFX2.
Moving label "Y" from space to metal1 in cell TBUFX2.
Reading "XOR2X1".
Moving label "Y" from space to metal1 in cell XOR2X1.
Moving label "vdd" from space to metal1 in cell XOR2X1.
Moving label "B" from space to metal1 in cell XOR2X1.
Moving label "A" from space to metal1 in cell XOR2X1.
Moving label "gnd" from space to metal1 in cell XOR2X1.
Reading "MUX2X1".
Moving label "S" from space to metal1 in cell MUX2X1.
Moving label "vdd" from space to metal1 in cell MUX2X1.
Moving label "gnd" from space to metal1 in cell MUX2X1.
Moving label "Y" from space to metal1 in cell MUX2X1.
Moving label "A" from space to metal1 in cell MUX2X1.
Moving label "B" from space to metal1 in cell MUX2X1.
Reading "XNOR2X1".
Moving label "A" from space to metal1 in cell XNOR2X1.
Moving label "B" from space to metal1 in cell XNOR2X1.
Moving label "gnd" from space to metal1 in cell XNOR2X1.
Moving label "vdd" from space to metal1 in cell XNOR2X1.
Moving label "Y" from space to metal1 in cell XNOR2X1.
Reading "LATCH".
Moving label "D" from space to metal1 in cell LATCH.
Moving label "Q" from space to metal1 in cell LATCH.
Moving label "gnd" from space to metal1 in cell LATCH.
Moving label "vdd" from space to metal1 in cell LATCH.
Moving label "CLK" from space to metal1 in cell LATCH.
Reading "DFFSR".
Moving label "gnd" from space to metal1 in cell DFFSR.
Moving label "vdd" from space to metal1 in cell DFFSR.
Moving label "D" from space to metal1 in cell DFFSR.
Moving label "S" from space to metal1 in cell DFFSR.
Moving label "R" from space to metal1 in cell DFFSR.
Moving label "Q" from space to metal1 in cell DFFSR.
Moving label "CLK" from space to metal1 in cell DFFSR.
Reading "CLKBUF1".
Moving label "A" from space to metal1 in cell CLKBUF1.
Moving label "vdd" from space to metal1 in cell CLKBUF1.
Moving label "gnd" from space to metal1 in cell CLKBUF1.
Moving label "Y" from space to metal1 in cell CLKBUF1.
Reading "CLKBUF2".
Moving label "vdd" from space to metal1 in cell CLKBUF2.
Moving label "gnd" from space to metal1 in cell CLKBUF2.
Moving label "A" from space to metal1 in cell CLKBUF2.
Moving label "Y" from space to metal1 in cell CLKBUF2.
Reading "CLKBUF3".
Moving label "gnd" from space to metal1 in cell CLKBUF3.
Moving label "vdd" from space to metal1 in cell CLKBUF3.
Moving label "A" from space to metal1 in cell CLKBUF3.
Moving label "Y" from space to metal1 in cell CLKBUF3.
Reading "iit_stdcells".
Scaled magic input cell alu geometry by factor of 2
alu: 10000 rects
Processing timestamp mismatches: FILL, NOR2X1, AOI21X1, INVX2, BUFX2, NOR3X1, OAI21X1, OAI22X1, AND2X2, INVX1, OR2X2, NAND2X1, NAND3X1, XNOR2X1, AOI22X1, BUFX4, INVX4, XOR2X1, MUX2X1.
Errors in synthesis flow, qflow status = 1
